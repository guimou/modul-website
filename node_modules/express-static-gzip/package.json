{
  "_args": [
    [
      {
        "raw": "express-static-gzip@^0.3.0",
        "scope": null,
        "escapedName": "express-static-gzip",
        "name": "express-static-gzip",
        "rawSpec": "^0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "C:\\Users\\guill\\Dev\\modul-website"
    ]
  ],
  "_from": "express-static-gzip@>=0.3.0 <0.4.0",
  "_id": "express-static-gzip@0.3.0",
  "_inCache": true,
  "_location": "/express-static-gzip",
  "_nodeVersion": "8.1.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/express-static-gzip-0.3.0.tgz_1499368479849_0.8160584492143244"
  },
  "_npmUser": {
    "name": "tkoenig",
    "email": "tobiaskoenig1@googlemail.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "express-static-gzip@^0.3.0",
    "scope": null,
    "escapedName": "express-static-gzip",
    "name": "express-static-gzip",
    "rawSpec": "^0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/express-static-gzip/-/express-static-gzip-0.3.0.tgz",
  "_shasum": "5c78fa7fe2094eb93929564433608ad1048a35e2",
  "_shrinkwrap": null,
  "_spec": "express-static-gzip@^0.3.0",
  "_where": "C:\\Users\\guill\\Dev\\modul-website",
  "author": {
    "name": "Tobias Koenig",
    "email": "tobiaskoenig1@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/tkoenig89/express-static-gzip/issues"
  },
  "dependencies": {
    "mime": "^1.3.4",
    "serve-static": "^1.12.3"
  },
  "description": "simple wrapper on top of express.static, that allows serving pre-gziped files",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-dnpJaXFWrNOezpgI37V1d8tLpC5+8ZF89B2Pt+kq3VmDJQnnvXxI0GUpJZnWxNQw7TJsTQl+RjYdQ6z/wBM0cg==",
    "shasum": "5c78fa7fe2094eb93929564433608ad1048a35e2",
    "tarball": "https://registry.npmjs.org/express-static-gzip/-/express-static-gzip-0.3.0.tgz"
  },
  "gitHead": "a95b1c4cab2bb8b7fcad8c1d8269948367a6a66a",
  "homepage": "https://github.com/tkoenig89/express-static-gzip#readme",
  "keywords": [
    "express",
    "static",
    "gzip",
    "brotli"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "tkoenig",
      "email": "tobiaskoenig1@googlemail.com"
    }
  ],
  "name": "express-static-gzip",
  "optionalDependencies": {},
  "readme": "# express-static-gzip\nProvides a small layer on top of the express.static middleware, which allows to serve pre-gzipped files from a directory. Now supports other compressions like *brotli* as well.\n\n# Requirements\nFor the express-static-gzip middleware to work properly you need to first ensure that you have all files gzipped, which you want to serve as a compressed version to the browser.\nSimplest use case is to either have a folder with only .gz files, or you have a folder with the .gz files next to the original files. Some goes for other compressions.\n\n# Usage\nIn case you just want to serve gzipped files only, this simple example would do:\n\n```javascript\nvar express = require(\"express\");\nvar expressStaticGzip = require(\"express-static-gzip\");\nvar app = express();\n\napp.use(\"/\", expressStaticGzip(\"/my/rootFolder/\"));\n```\n\nWhile gzip compression is always enabled you now have the choice to add other types of compressions using the *options* object. Currently *brotli* can be enabled using the **options.enableBrotli** flag.\nAll other compressions need to be added by passing an array to **options.customCompressions**.\nThe *options* object is also passed to the express.static middleware, in case you want to configure this one as well.\n\nThe following example will show howto add brotli and deflate(with file extension *.zz*) to the middleware (it will still support gzip):\n\n```javascript\nvar express = require(\"express\");\nvar expressStaticGzip = require(\"express-static-gzip\");\nvar app = express();\n\napp.use(\"/\", expressStaticGzip(\"/my/rootFolder/\", {\n    enableBrotli: true,\n    customCompressions: [{\n        encodingName: \"deflate\",\n        fileExtension: \"zz\"\n    }]\n}));\n```\n\nCompressions are selected in the following order if a file is requested from the middleware:\n* any custom compression in the order they are provided to *options.customCompressions*\n* brotli (if enabled via *options.enableBrotli*)\n* gzip\n* plain file (in case no compression exists or none is matching the browsers accepted encodings header)\n\nWhen the middleware is created it will check the given root folder and all subfolders for files matching the registered compression. Adding files later to the folder will not be recognized by the middleware.\n\nIn default mode a request for \"/\" or \"\\<somepath\\>/\" will now serve index.html as compressed version. If for some kind of reason you don't want this to happen set **options.indexFromEmptyFile** to false.\n\n```javascript\napp.use(\"/\", expressStaticGzip(\"/my/rootFolder/\", { indexFromEmptyFile: false }));\n```\n\n# Example\nIn case you have the following basic file structure\n\n* rootFolder\n * index.html\n * index.html.gz\n * index.html.br\n * test.html.gz\n * main.js\n\nand you use set the *enableBrotli* flag to true, express-static-gzip will answer GET requests like this:\n\n> GET / >>> /my/rootFolder/index.html.br\n\n> GET /index.html >>> /my/rootFolder/index.html.br\n\n> GET /test.html >>> /my/rootFolder/test.html.gz\n\n> GET /main.js >>> /my/rootFolder/main.js\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tkoenig89/express-static-gzip.git"
  },
  "version": "0.3.0"
}
