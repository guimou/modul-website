"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint");
var chalk = require("chalk");
var Formatter = (function (_super) {
    __extends(Formatter, _super);
    function Formatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Formatter.prototype.formatFailure = function (failure) {
        var _a = failure.getStartPosition().getLineAndCharacter(), line = _a.line, character = _a.character;
        var position = line + 1 + ":" + (character + 1);
        var message = failure.getFailure();
        var ruleName = failure.getRuleName();
        return "  " + chalk.dim(position) + " " + message + " " + chalk.dim(ruleName);
    };
    Formatter.prototype.groupByFile = function (failures) {
        return failures.reduce(function (groups, failure) {
            var fileName = failure.getFileName();
            var fileFailures = groups[fileName] || [];
            groups[fileName] = fileFailures.concat([failure]);
            return groups;
        }, {});
    };
    Formatter.prototype.format = function (failures) {
        var _this = this;
        var failuresByFile = this.groupByFile(failures);
        return Object.keys(failuresByFile)
            .reduce(function (lines, fileName) {
            lines.push(chalk.underline.yellow(fileName));
            var fileFailures = failuresByFile[fileName];
            return lines.concat(fileFailures.map(_this.formatFailure), ['\n']);
        }, [])
            .join('\n');
    };
    return Formatter;
}(Lint.Formatters.AbstractFormatter));
exports.Formatter = Formatter;
