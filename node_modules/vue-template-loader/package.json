{
  "_args": [
    [
      {
        "raw": "vue-template-loader@^0.3.1",
        "scope": null,
        "escapedName": "vue-template-loader",
        "name": "vue-template-loader",
        "rawSpec": "^0.3.1",
        "spec": ">=0.3.1 <0.4.0",
        "type": "range"
      },
      "C:\\Users\\guill\\Dev\\modul-website"
    ]
  ],
  "_from": "vue-template-loader@>=0.3.1 <0.4.0",
  "_id": "vue-template-loader@0.3.1",
  "_inCache": true,
  "_location": "/vue-template-loader",
  "_nodeVersion": "6.10.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/vue-template-loader-0.3.1.tgz_1493481617439_0.25078753381967545"
  },
  "_npmUser": {
    "name": "ktsn",
    "email": "ktsn55@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vue-template-loader@^0.3.1",
    "scope": null,
    "escapedName": "vue-template-loader",
    "name": "vue-template-loader",
    "rawSpec": "^0.3.1",
    "spec": ">=0.3.1 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/",
    "/@ulaval/modul-components"
  ],
  "_resolved": "https://registry.npmjs.org/vue-template-loader/-/vue-template-loader-0.3.1.tgz",
  "_shasum": "e7d1f1fffbad1de4250ab6905474c59cc947ddd1",
  "_shrinkwrap": null,
  "_spec": "vue-template-loader@^0.3.1",
  "_where": "C:\\Users\\guill\\Dev\\modul-website",
  "author": {
    "name": "katashin"
  },
  "bugs": {
    "url": "https://github.com/ktsn/vue-template-loader/issues"
  },
  "dependencies": {
    "hash-sum": "^1.0.2",
    "loader-utils": "^1.1.0",
    "postcss": "^5.2.16",
    "postcss-selector-parser": "^2.2.3",
    "source-map": "^0.5.6",
    "vue-hot-reload-api": "^2.0.11",
    "vue-template-es2015-compiler": "^1.5.1"
  },
  "description": "Vue.js 2.0 template loader for webpack",
  "devDependencies": {
    "babel-eslint": "^7.2.1",
    "babel-plugin-transform-class-properties": "^6.23.0",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-register": "^6.24.0",
    "css-loader": "^0.28.0",
    "eslint": "^3.19.0",
    "eslint-config-ktsn": "^1.0.0",
    "extract-text-webpack-plugin": "^2.1.0",
    "file-loader": "^0.11.1",
    "html-webpack-plugin": "^2.28.0",
    "jasmine": "^2.5.3",
    "js-base64": "^2.1.9",
    "node-sass": "^4.5.2",
    "pug-html-loader": "^1.1.4",
    "require-from-string": "^1.2.1",
    "sass-loader": "^6.0.3",
    "style-loader": "^0.16.1",
    "ts-loader": "^2.0.3",
    "typescript": "^2.2.2",
    "vue": "^2.2.6",
    "vue-class-component": "^5.0.1",
    "vue-template-compiler": "^2.2.6",
    "webpack": "^2.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "e7d1f1fffbad1de4250ab6905474c59cc947ddd1",
    "tarball": "https://registry.npmjs.org/vue-template-loader/-/vue-template-loader-0.3.1.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "072c14c577d2dc1ccdc25cc4bd355e5cb8bea86b",
  "homepage": "https://github.com/ktsn/vue-template-loader#readme",
  "keywords": [
    "vue.js",
    "webpack",
    "template",
    "loader"
  ],
  "license": "MIT",
  "main": "lib/template-loader.js",
  "maintainers": [
    {
      "name": "ktsn",
      "email": "ktsn55@gmail.com"
    }
  ],
  "name": "vue-template-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "vue-template-compiler": "^2.0.0"
  },
  "readme": "# vue-template-loader\n\nVue.js 2.0 template loader for webpack\n\nThis loader is just pre-compile a template by using [vue-template-compiler](https://www.npmjs.com/package/vue-template-compiler) and provide a function that can inject render function to a component options object.  \n\nIn most cases, you should use [vue-loader](https://github.com/vuejs/vue-loader).\n\n## Features\n\n- Insert a render function to a component options object\n- vue-loader like scoped css and css modules support\n- HMR support for a template\n- Decorator syntax support (can be used with [vue-class-component](https://github.com/vuejs/vue-class-component) or other class style components)\n\n## Configuration for webpack\n\n### Loading Template\n\nJust add a loader option for vue-template-loader to your webpack configuration.\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      { test: /\\.html$/, use: 'vue-template-loader' }\n    ]\n  }\n}\n```\n\n### Asserts Handling\n\nYou can transform an asset path in template to `require` expression that the webpack can handle. For example, if you would like to process image file specified on `src` attributes of `<img>` element, you should set `transformToRequire` option.\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/,\n        loader: 'vue-template-loader',\n        options: {\n          transformToRequire: {\n            // The key should be element name,\n            // the value should be attribute name or its array\n            img: 'src'\n          }\n        }\n      },\n\n      // Make sure to add the loader that can process the asset files\n      {\n        test: /\\.(png|jpg)/,\n        loader: 'file-loader',\n        options: {\n          // ...\n        }\n      }\n    ]\n  }\n}\n```\n\n### Loading Scoped Styles\n\nYou need to specify scoped flag and loaders for style files such as `style-loader` and `css-loader`. Note that they must be `enforce: post` to inject scope id into styles before they are processed by them.\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/,\n        loader: 'vue-template-loader',\n        options: {\n          scoped: true // add `scoped` flag\n        }\n      },\n      {\n        enforce: 'post', // required\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  }\n}\n```\n\n#### `>>>` combinator\n\nThere are cases you may want to style children components. e.g. using a third party component. In such cases, you can use `>>>` combinator to apply styles to any descendant elements of a scoped styled element.\n\nInput:\n\n```css\n.foo >>> .bar {\n  color: red;\n}\n```\n\nOutput:\n\n```css\n.foo[data-v-4fd8d954] .bar {\n  color: red\n}\n```\n\n### Loading CSS Modules\n\nAll what you have to do is enable `modules` flag of `css-loader`. vue-template-loader will add `$style` property and you can use hashed classes through it.\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/,\n        use: 'vue-template-loader'\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader?modules'] // Enable CSS Modules\n      }\n    ]\n  }\n}\n```\n\n### Disabling HMR\n\nBy default Hot Module Replacement is disabled in following situations:\n\n * Webpack `target` is `node`\n * Webpack minifies the code\n * `process.env.NODE_ENV === 'production'`\n\nYou may use `hmr: false` option to disable HMR explicitly for any other situation.\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/,\n        loader: 'vue-template-loader',\n        options: {\n          hmr: false // disables Hot Modules Replacement\n        }\n      }\n    ]\n  }\n}\n```\n\n## Example\n\nWrite a template of Vue component as html.\n\n```html\n<!-- app.html -->\n<div class=\"app\">\n  <p>{{ text }}</p>\n  <button type=\"button\" @click=\"log\">Log</button>\n</div>\n```\n\nImport it as a function and pass a component option to the function. If you also would like to load a style file, add `style` query and specify the style file path.\n\n```js\n// app.js\nimport withRender from './app.html?style=./app.css'\n\nexport default withRender({\n  data () {\n    return {\n      text: 'Example text'\n    }\n  },\n\n  methods: {\n    log () {\n      console.log('output log')\n    }\n  }\n})\n```\n\nYou can use decorator syntax for any class style components.\n\n```js\nimport Vue from 'vue'\nimport Component from 'vue-class-component'\nimport WithRender from './app.html'\n\n@WithRender\n@Component\nexport default class App extends Vue {\n  text = 'Example text'\n\n  log () {\n    console.log('output log')\n  }\n}\n```\n\nIf you use this loader with TypeScript, make sure to add a declaration file for html file into your project.\n\n```ts\ndeclare module '*.html' {\n  import Vue = require('vue')\n  interface WithRender {\n    <V extends Vue>(options: Vue.ComponentOptions<V>): Vue.ComponentOptions<V>\n    <V extends typeof Vue>(component: V): V\n  }\n  const withRender: WithRender\n  export = withRender\n}\n```\n\n## Templates\n\nThere are vue-cli templates using vue-template-loader (Thanks to @Toilal).\n\n- [Toilal/vue-ts-hmr-std-files](https://github.com/Toilal/vue-ts-hmr-std-files)\n- [Toilal/vue-webpack-template](https://github.com/Toilal/vue-webpack-template)\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ktsn/vue-template-loader.git"
  },
  "scripts": {
    "examples": "./examples/build.sh",
    "lint": "eslint lib test",
    "prepublish": "npm run test",
    "test": "npm run lint && jasmine JASMINE_CONFIG_PATH=test/jasmine.json"
  },
  "version": "0.3.1"
}
